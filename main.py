import logging

import telegram
import yaml
from telegram import *
from telegram.ext import *

with open('config.yaml', 'r') as file:
    token = yaml.safe_load(file)
    token = token['TOKEN']

bot = telegram.Bot(token=token)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING)
loggerm = logging.getLogger("Anon_msg")
templist = []
SMSG = range(1)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(update.effective_message.text)
    loggerm.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.full_name}({update.effective_user.id}) —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∫–æ–º–∞–Ω–¥—É /start")
    if len(update.effective_message.text.split(" ")) < 2:
        anonurl = f"https://t.me/AnonymousMessagesUA_bot?start={update.effective_user.id}"
        await update.effective_chat.send_message(f"–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —è–∫–∏–π –Ω–∞–¥–∞—Å—Ç—å –∑–º–æ–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ç–æ–±—ñ –∞–Ω–æ–Ω—ñ–º–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–±—ñ –∞–Ω–æ–Ω—ñ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {anonurl}")
        return ConversationHandler.END
    else:
        if update.effective_user.id == int(update.effective_message.text.split(" ")[1]):
            await update.effective_chat.send_message("–¢–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–∞–º–æ–º—É —Å–æ–±—ñüò¢")
            return ConversationHandler.END
        else:
            sid = update.effective_message.text.split(" ")[1]
            checklist(update.effective_user.id)
            templist.extend([[update.effective_user.id, sid]])
            await update.effective_chat.send_message("–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ —Ç–∏ —Ö–æ—á–µ—à –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏üòã\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏: /cancel")
            return SMSG

async def sendMSG(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sid = 0
    print(templist)
    for x in templist:
        if update.effective_user.id == x[0]:
            sid = x[1]
            continue
    if sid == 0:
        await update.effective_chat.send_message("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–∏–±–∞—á, –∞–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return ConversationHandler.END
    print(sid)
    if update.effective_message.text.startswith("/start"):
        await update.effective_chat.send_message("–î—ñ—é –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ, —á–µ—Ä–µ–∑ —Ç–µ —â–æ –±—É–ª–∞ –∞–∫—Ç–∏–≤–Ω–∞ —ñ–Ω—à–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!")
        return ConversationHandler.END
    pmsg = ("–¢–æ–±—ñ –Ω–∞–¥—ñ–π—à–ª–æ –∞–Ω–æ–Ω—ñ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!\n\n"
            f"<i>{update.effective_message.text}</i>")
    try:
        await bot.send_message(chat_id=sid, text=pmsg, parse_mode=telegram.constants.ParseMode.HTML)
    except:
        await update.effective_chat.send_message("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —è–∫–æ–º—É —Ç–∏ —Ö–æ—á–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –º–µ–Ω–µ, —Ç–æ–º—É —è –Ω–µ –º–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–≤–æ—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—èüò¢")
    finally:
        return ConversationHandler.END

async def cancel_conv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_chat.send_message("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    checklist(update.effective_user.id)
    return ConversationHandler.END


def checklist(userid):
    if not len(templist) == 0:
        for x in templist:
            if userid == x[0]:
                templist.remove(x)

if __name__ == '__main__':
    application = ApplicationBuilder().token(token).build()
    smsg_conv = ConversationHandler(
        entry_points=[CommandHandler("start", callback=start)],
        states={
            SMSG: [MessageHandler(~filters.Regex("/cancel")&(filters.TEXT), callback=sendMSG)]
        },
        fallbacks=[CommandHandler("cancel", callback=cancel_conv)],
    )
    application.add_handler(smsg_conv)
    application.run_polling()